#Puzzle 2a - simple assembler processor
load_array(){
i=0
unset array
for a in $(sed 's/,/\n/g' input.txt); do
    array[${i}]=${a}
    let i=${i}+1
done < tmp.txt
array[1]=12
array[2]=2
}

run_script(){
echo "Starting array: ${array[*]}"
echo ""
j=0
while true ; do
    echo "Indexer: ${j}"
    
    op=${array[j]}
    let j=${j}+1
    echo "Op: ${op}"

    index1=${array[j]}
    num1=${array[index1]}
    let j=${j}+1

    index2=${array[j]}
    num2=${array[index2]}
    let j=${j}+1

    echo "Index1: ${index1}"
    echo "Index2: ${index2}"

    dest=${array[j]}
    let j=${j}+1
    echo "Dest: ${dest}"

    echo ""
    echo "Num1: ${num1}"
    echo "Num2: ${num2}"

    case ${op} in
      1) #addition
        result=$(( ${num1} + ${num2} ))
        echo "Adding.  Result: ${result}"
        array[${dest}]=${result}
      ;;
      2) #multiplication
        result=$(( ${num1} * ${num2} ))
        echo "Multiplying.  Result: ${result}"
        array[${dest}]=${result}
      ;;
      99) #halt
        echo "Halting."
        echo ""
        echo "Final value: ${array[0]}"
        echo "${array[0]}" > final_output.txt
        break
      ;;
      *) #Error/unknown
        echo "ERROR: operation unknown"
        break
      ;;
    esac
    echo "Array: ${array[*]}"

    echo ""
done
}

load_array
run_script

#Puzzle 2b - custom input to assembler processor
load_array_params(){
loop=0
unset array
for a in $(sed 's/,/\n/g' input.txt); do
    array[${loop}]=${a}
    let loop=${loop}+1
done < tmp.txt
array[1]=$1
array[2]=$2
}

for z in {0..99} ; do
    for y in {0..99} ; do
        load_array_params ${z} ${y}
        run_script > /dev/null
        echo -ne "\r                   \rZ: ${z}  Y: ${y}"
        if [ $(cat final_output.txt) == "19690720" ] ; then
            echo ""
            echo Success!
        fi
    done
done
